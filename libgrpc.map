{
  global:
  "grpc_channel_destroy";
  "grpc_channel_get_info";
  "grpc_channel_reset_connect_backoff";
  "grpc_channel_create_call";
  "grpc_slice_unref";
  "grpc_channel_create_registered_call";
  "grpc_census_call_set_context";
  "grpc_channel_register_call";
  "grpc_channel_check_connectivity_state";
  "grpc_channel_watch_connectivity_state";
  "grpc_init";
  "grpc_shutdown";
  "__emutls_v._ZN9grpc_core7ExecCtx9exec_ctx_E";
  "grpc_call_unref";
  "grpc_call_cancel_with_status";
  "grpc_call_cancel";
  "grpc_compression_algorithm_name";
  "grpc_call_get_peer";
  "grpc_lame_client_channel_create";
  "grpc_insecure_channel_create_from_fd";
  "grpc_insecure_channel_create";
  "grpc_secure_channel_create";
  "grpc_call_set_credentials";
  "grpc_google_default_credentials_create";
  "grpc_external_account_credentials_create";
  "grpc_ssl_credentials_create";
  "grpc_empty_slice";
  "grpc_sts_credentials_create";
  "grpc_metadata_credentials_create_from_plugin";
  "grpc_auth_metadata_context_copy";
  "__emutls_v._ZN9grpc_core26ApplicationCallbackExecCtx18callback_exec_ctx_E";
  "grpc_alts_credentials_client_options_create";
  "grpc_alts_credentials_client_options_add_target_service_account";
  "grpc_alts_credentials_create";
  "grpc_alts_credentials_options_destroy";
  "grpc_local_credentials_create";
  "grpc_tls_credentials_create";
  "grpc_google_compute_engine_credentials_create";
  "grpc_service_account_jwt_access_credentials_create";
  "grpc_google_refresh_token_credentials_create";
  "grpc_access_token_credentials_create";
  "grpc_google_iam_credentials_create";
  "grpc_composite_channel_credentials_create";
  "grpc_composite_call_credentials_create";
  "grpc_auth_metadata_context_reset";
  "grpc_insecure_credentials_create";
  "grpc_xds_credentials_create";
  "grpc_channel_credentials_release";
  "grpc_auth_property_iterator_next";
  "grpc_resource_quota_arg_vtable";
  "grpc_completion_queue_next";
  "grpc_completion_queue_thread_local_cache_init";
  "grpc_completion_queue_thread_local_cache_flush";
  "grpc_completion_queue_factory_lookup";
  "grpc_completion_queue_create";
  "grpc_completion_queue_create_for_next";
  "grpc_completion_queue_create_for_pluck";
  "grpc_completion_queue_shutdown";
  "grpc_completion_queue_destroy";
  "grpc_completion_queue_pluck";
  "grpc_byte_buffer_copy";
  "grpc_byte_buffer_destroy";
  "grpc_byte_buffer_length";
  "grpc_call_start_batch";
  "grpc_call_ref";
  "grpc_call_arena_alloc";
  "grpc_call_error_to_string";
  "grpc_byte_buffer_reader_init";
  "grpc_byte_buffer_reader_destroy";
  "grpc_byte_buffer_reader_next";
  "grpc_byte_buffer_reader_peek";
  "grpc_raw_byte_buffer_create";
  "grpc_slice_new_with_user_data";
  "grpc_slice_new_with_len";
  "grpc_slice_malloc";
  "grpc_slice_ref";
  "grpc_slice_split_tail";
  "grpc_slice_split_head";
  "grpc_slice_sub";
  "grpc_slice_from_static_buffer";
  "grpc_slice_from_copied_buffer";
  "grpc_slice_buffer_add";
  "grpc_slice_buffer_pop";
  "grpc_metadata_array_init";
  "grpc_metadata_array_destroy";
  "grpc_resource_quota_create";
  "grpc_resource_quota_unref";
  "grpc_resource_quota_resize";
  "grpc_resource_quota_set_max_threads";
  "grpc_auth_context_peer_identity";
  "grpc_auth_context_peer_identity_property_name";
  "grpc_auth_context_find_properties_by_name";
  "grpc_auth_context_property_iterator";
  "grpc_auth_context_add_property";
  "grpc_auth_context_set_peer_identity_property_name";
  "grpc_auth_context_peer_is_authenticated";
  "grpc_call_auth_context";
  "grpc_tls_identity_pairs_create";
  "grpc_tls_identity_pairs_add_pair";
  "grpc_tls_certificate_provider_static_data_create";
  "grpc_tls_certificate_provider_release";
  "grpc_tls_certificate_provider_file_watcher_create";
  "grpc_tls_server_authorization_check_config_create";
  "grpc_tls_server_authorization_check_config_release";
  "grpc_tls_credentials_options_create";
  "grpc_tls_credentials_options_set_certificate_provider";
  "grpc_tls_credentials_options_watch_root_certs";
  "grpc_tls_credentials_options_set_root_cert_name";
  "grpc_tls_credentials_options_watch_identity_key_cert_pairs";
  "grpc_tls_credentials_options_set_identity_cert_name";
  "grpc_tls_credentials_options_set_server_verification_option";
  "grpc_tls_credentials_options_set_server_authorization_check_config";
  "grpc_tls_credentials_options_set_cert_request_type";
  "upb_arena_init";
  "_upb_msg_new";
  "_upb_decode";
  "upb_arena_free";
  "upb_alloc_global";
  "grpc_health_v1_HealthCheckRequest_msginit";
  "upb_encode_ex";
  "grpc_health_v1_HealthCheckResponse_msginit";
  "grpc_server_add_insecure_http2_port";
  "grpc_server_add_secure_http2_port";
  "grpc_server_credentials_set_auth_metadata_processor";
  "grpc_ssl_server_credentials_create_ex";
  "grpc_alts_credentials_server_options_create";
  "grpc_alts_server_credentials_create";
  "grpc_local_server_credentials_create";
  "grpc_tls_server_credentials_create";
  "grpc_server_credentials_release";
  "grpc_resource_quota_ref";
  "grpc_server_register_completion_queue";
  "grpc_server_request_registered_call";
  "grpc_call_details_init";
  "grpc_server_request_call";
  "grpc_server_create";
  "grpc_server_set_config_fetcher";
  "grpc_server_destroy";
  "grpc_server_register_method";
  "grpc_server_start";
  "grpc_server_shutdown_and_notify";
  "grpc_server_cancel_all_calls";
  "grpc_call_details_destroy";
  "grpc_census_call_get_context";
  "grpc_server_add_insecure_channel_from_fd";
  "grpc_insecure_server_credentials_create";
  "grpc_xds_server_credentials_create";
  "gpr_set_log_verbosity";
  "gpr_inf_future";
  "gpr_assertion_failed";
  "gpr_free";
  "gpr_log";
  "gpr_malloc";
  "grpc_slice_buffer_destroy";
  "grpc_slice_buffer_reset_and_unref";
  "grpc_slice_copy";
  "grpc_slice_buffer_init";
  "grpc_slice_buffer_swap";
  "grpc_tls_certificate_verifier_release";
  "grpc_tls_certificate_verifier_verify";
  "grpc_tls_certificate_verifier_cancel";
  "grpc_tls_certificate_verifier_no_op_create";
  "grpc_tls_certificate_verifier_host_name_create";
  "grpc_tls_credentials_options_destroy";
  "grpc_iomgr_run_in_background()";
  "grpc_channel_create_from_fd";
  "grpc_channel_create";
  "grpc_tls_credentials_options_set_crl_directory";
  "grpc_iomgr_run_in_background()";
  "grpc_tls_credentials_options_set_tls_session_key_log_file_path";
  "grpc_tls_credentials_options_set_certificate_verifier";
  "grpc_tls_credentials_options_copy";
  "grpc_tls_credentials_options_set_check_call_host";
  "grpc_tls_credentials_options_set_verify_server_cert";
  "grpc_tls_credentials_options_set_send_client_ca_list";
  "upb_Decode";
  "upb_Encode";
  "grpc_server_add_http2_port";
  "grpc_authorization_policy_provider_arg_vtable";
  "grpc_call_failed_before_recv_message";
  "grpc_server_add_channel_from_fd";
  "grpc_server_config_fetcher_xds_create";
  "grpc_byte_buffer_reader_readall";
  "grpc_slice_buffer_add_indexed";
  "__emutls_v._ZN9grpc_core9Timestamp25thread_local_time_source_E";
  extern "C++" {
    "grpc_inproc_channel_create(grpc_server*, grpc_channel_args*, void*)";
    "grpc_resource_user_allocate_threads(grpc_resource_user*, int)";
    "grpc_resource_user_free_threads(grpc_resource_user*, int)";
    "grpc_resource_user_create(grpc_resource_quota*, char const*)";
    "grpc_resource_user_unref(grpc_resource_user*)";
    "grpc_cq_internal_unref(grpc_completion_queue*)";
    "grpc_core::Json::Parse(std::__h::basic_string_view<char, std::__h::char_traits<char>>, grpc_error**)";
    "grpc_json_get_string_property(grpc_core::Json const&, char const*, grpc_error**)";
    "grpc_load_file(char const*, int, grpc_slice*)";
    "grpc_error_string(grpc_error*)";
    "grpc_auth_property_reset(grpc_auth_property*)";
    "grpc_timer_init_unset(grpc_timer*)";
    "grpc_cq_internal_ref(grpc_completion_queue*)";
    "grpc_cq_begin_op(grpc_completion_queue*, void*)";
    "grpc_timespec_to_millis_round_up(gpr_timespec)";
    "grpc_timer_init(grpc_timer*, long long, grpc_closure*)";
    "grpc_timer_init(grpc_timer*, long, grpc_closure*)";
    "grpc_timer_cancel(grpc_timer*)";
    "grpc_cq_end_op(grpc_completion_queue*, void*, grpc_error*, void (*)(void*, grpc_cq_completion*), void*, grpc_cq_completion*, bool)";
    "grpc_socket_mutator_to_arg(grpc_socket_mutator*)";
    "grpc_mdelem_from_slices(grpc_slice const&, grpc_slice const&)";
    "grpc_metadata_batch_link_head(grpc_metadata_batch*, grpc_linked_mdelem*)";
    "grpc_log_error(char const*, grpc_error*, char const*, int)";
    "grpc_core::Executor::Run(grpc_closure*, grpc_error*, grpc_core::ExecutorType, grpc_core::ExecutorJobType)";
    "grpc_core::ExecCtx::Flush()";
    "grpc_error_do_unref(grpc_error*)";
    "grpc_channel_next_op(grpc_channel_element*, grpc_transport_op*)";
    "grpc_channel_next_get_info(grpc_channel_element*, grpc_channel_info const*)";
    "grpc_call_next_op(grpc_call_element*, grpc_transport_stream_op_batch*)";
    "grpc_call_stack_ignore_set_pollset_or_pollset_set(grpc_call_element*, grpc_polling_entity*)";
    "grpc_channel_init_register_stage(grpc_channel_stack_type, int, bool (*)(grpc_channel_stack_builder*, void*), void*)";
    "grpc_channel_stack_builder_get_channel_arguments(grpc_channel_stack_builder*)";
    "grpc_channel_stack_builder_prepend_filter(grpc_channel_stack_builder*, grpc_channel_filter const*, void (*)(grpc_channel_stack*, grpc_channel_element*, void*), void*)";
    "grpc_core::ServiceConfig::Create(grpc_channel_args const*, std::__h::basic_string_view<char, std::__h::char_traits<char>>, grpc_error**)";
    "grpc_core::Server::SetRegisteredMethodAllocator(grpc_completion_queue*, void*, std::__h::function<grpc_core::Server::RegisteredCallAllocation ()>)";
    "grpc_core::Server::SetBatchMethodAllocator(grpc_completion_queue*, std::__h::function<grpc_core::Server::BatchCallAllocation ()>)";
    "grpc_core::Json::Parse(std::__1::basic_string_view<char, std::__1::char_traits<char>>, grpc_error**)";
    "grpc_core::ServiceConfig::Create(grpc_channel_args const*, std::__1::basic_string_view<char, std::__1::char_traits<char>>, grpc_error**)";
    "grpc_core::Server::SetRegisteredMethodAllocator(grpc_completion_queue*, void*, std::__1::function<grpc_core::Server::RegisteredCallAllocation ()>)";
    "grpc_core::Server::SetBatchMethodAllocator(grpc_completion_queue*, std::__1::function<grpc_core::Server::BatchCallAllocation ()>)";
    "grpc_core::ChannelArgs::ChannelArgs()";
    "grpc_core::ChannelArgs::Set(std::__h::basic_string_view<char, std::__h::char_traits<char>>, char const*) const";
    "grpc_core::Subchannel::Create(std::__h::unique_ptr<grpc_core::SubchannelConnector, grpc_core::OrphanableDelete>, grpc_resolved_address const&, grpc_core::ChannelArgs const&)";
    "grpc_core::ChannelArgs::~ChannelArgs()";
    "grpc_core::StatusCreate(absl::lts_20230802::StatusCode, std::__h::basic_string_view<char, std::__h::char_traits<char>>, grpc_core::DebugLocation const&, std::__h::vector<absl::lts_20230802::Status, std::__h::allocator<absl::lts_20230802::Status>>)";
    "grpc_core::ChannelArgs::operator=(grpc_core::ChannelArgs const&)";
    "grpc_core::ExecCtx::Run(grpc_core::DebugLocation const&, grpc_closure*, absl::lts_20230802::Status)";
    "grpc_core::CoreConfiguration::BuildNewAndMaybeSet()";
    "grpc_core::ChannelArgsPreconditioning::PreconditionChannelArgs(grpc_channel_args const*) const";
    "grpc_core::ChannelArgs::ChannelArgs(grpc_core::ChannelArgs const&)";
    "grpc_core::Channel::Create(char const*, grpc_core::ChannelArgs, grpc_channel_stack_type, grpc_core::Transport*)";
    "grpc_channel_args_destroy(grpc_channel_args*)";
    "grpc_core::CoreConfiguration::config_";
    "grpc_core::ClientChannelFactory::ChannelArgName()";
    "grpc_core::ChannelArgs::Pointer::Pointer(void*, grpc_arg_pointer_vtable const*)";
    "grpc_core::ChannelArgs::Set(std::__h::basic_string_view<char, std::__h::char_traits<char>>, grpc_core::ChannelArgs::Pointer) const";
    "grpc_core::Server::AddListener(std::__h::unique_ptr<grpc_core::Server::ListenerInterface, grpc_core::OrphanableDelete>)";
    "grpc_core::Server::SetupTransport(grpc_core::Transport*, grpc_pollset*, grpc_core::ChannelArgs const&, grpc_core::RefCountedPtr<grpc_core::channelz::SocketNode> const&)";
    "vtable for grpc_core::promise_detail::Unwakeable";
    "vtable for grpc_core::ScopedTimeCache";
    "grpc_error_to_absl_status(absl::lts_20230802::Status)";
    "grpc_core::Combiner::Run(grpc_closure*, absl::lts_20230802::Status)";
    "grpc_core::SliceBuffer::JoinIntoString() const";
    "absl_status_to_grpc_error(absl::lts_20230802::Status)";
    "grpc_stream_destroy(grpc_stream_refcount*)";
    "grpc_core::ConnectivityStateTracker::AddWatcher(grpc_connectivity_state, std::__h::unique_ptr<grpc_core::ConnectivityStateWatcherInterface, grpc_core::OrphanableDelete>)";
    "grpc_core::ConnectivityStateTracker::RemoveWatcher(grpc_core::ConnectivityStateWatcherInterface*)";
    "grpc_error_set_int(absl::lts_20230802::Status, grpc_core::StatusIntProperty, int)";
    "grpc_event_engine::experimental::GetDefaultEventEngine(grpc_core::SourceLocation)";
    "grpc_combiner_create(std::__h::shared_ptr<grpc_event_engine::experimental::EventEngine>)";
    "grpc_combiner_unref(grpc_core::Combiner*)";
    "grpc_core::ConnectivityStateTracker::~ConnectivityStateTracker()";
    "grpc_core::HttpMethodMetadata::Encode(grpc_core::HttpMethodMetadata::ValueType)";
    "grpc_core::HttpSchemeMetadata::Encode(grpc_core::HttpSchemeMetadata::ValueType)";
    "grpc_core::ContentTypeMetadata::Encode(grpc_core::ContentTypeMetadata::ValueType)";
    "grpc_core::CompressionAlgorithmAsString(grpc_compression_algorithm)";
    "grpc_core::CompressionAlgorithmSet::ToSlice() const";
    "grpc_core::GrpcTimeoutMetadata::Encode(grpc_core::Timestamp)";
    "grpc_core::LbCostBinMetadata::Encode(grpc_core::LbCostBinMetadata::ValueType const&)";
    "grpc_slice_from_cpp_string(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>)";
    "grpc_core::HttpMethodMetadata::ParseMemento(grpc_core::Slice, bool, absl::lts_20230802::FunctionRef<void (std::__h::basic_string_view<char, std::__h::char_traits<char>>, grpc_core::Slice const&)>)";
    "grpc_core::HttpSchemeMetadata::Parse(std::__h::basic_string_view<char, std::__h::char_traits<char>>, absl::lts_20230802::FunctionRef<void (std::__h::basic_string_view<char, std::__h::char_traits<char>>, grpc_core::Slice const&)>)";
    "grpc_core::ContentTypeMetadata::ParseMemento(grpc_core::Slice, bool, absl::lts_20230802::FunctionRef<void (std::__h::basic_string_view<char, std::__h::char_traits<char>>, grpc_core::Slice const&)>)";
    "grpc_core::TeMetadata::ParseMemento(grpc_core::Slice, bool, absl::lts_20230802::FunctionRef<void (std::__h::basic_string_view<char, std::__h::char_traits<char>>, grpc_core::Slice const&)>)";
    "grpc_core::CompressionAlgorithmBasedMetadata::ParseMemento(grpc_core::Slice, bool, absl::lts_20230802::FunctionRef<void (std::__h::basic_string_view<char, std::__h::char_traits<char>>, grpc_core::Slice const&)>)";
    "grpc_core::CompressionAlgorithmSet::FromString(std::__h::basic_string_view<char, std::__h::char_traits<char>>)";
    "grpc_core::GrpcTimeoutMetadata::ParseMemento(grpc_core::Slice, bool, absl::lts_20230802::FunctionRef<void (std::__h::basic_string_view<char, std::__h::char_traits<char>>, grpc_core::Slice const&)>)";
    "grpc_core::GrpcTimeoutMetadata::MementoToValue(grpc_core::Duration)";
    "grpc_core::GrpcRetryPushbackMsMetadata::ParseMemento(grpc_core::Slice, bool, absl::lts_20230802::FunctionRef<void (std::__h::basic_string_view<char, std::__h::char_traits<char>>, grpc_core::Slice const&)>)";
    "grpc_core::LbCostBinMetadata::ParseMemento(grpc_core::Slice, bool, absl::lts_20230802::FunctionRef<void (std::__h::basic_string_view<char, std::__h::char_traits<char>>, grpc_core::Slice const&)>)";
    "grpc_core::metadata_detail::UnknownMap::Append(std::__h::basic_string_view<char, std::__h::char_traits<char>>, grpc_core::Slice)";
    "grpc_core::SliceBuffer::Append(grpc_core::Slice)";
    "grpc_core::ConnectivityStateTracker::SetState(grpc_connectivity_state, absl::lts_20230802::Status const&, char const*)";
    "grpc_core::Executor::Run(grpc_closure*, absl::lts_20230802::Status, grpc_core::ExecutorType, grpc_core::ExecutorJobType)";
    "grpc_call_is_trailers_only(grpc_call const*)";
    "grpc_core::JsonParse(std::__h::basic_string_view<char, std::__h::char_traits<char>>)";
    "grpc_json_get_string_property(grpc_core::experimental::Json const&, char const*, absl::lts_20230802::Status*)";
    "grpc_core::StatusToString(absl::lts_20230802::Status const&)";
    "grpc_event_engine::experimental::EventEngine::TaskHandle::kInvalid";
    "grpc_core::Timestamp::FromTimespecRoundUp(gpr_timespec)";
    "grpc_core::Duration::operator std::__h::chrono::duration<long long, std::__h::ratio<1ll, 1000000000ll>>() const";
    "grpc_cq_end_op(grpc_completion_queue*, void*, absl::lts_20230802::Status, void (*)(void*, grpc_cq_completion*), void*, grpc_cq_completion*, bool)";
    "grpc_tls_credentials_options_set_crl_provider(grpc_tls_credentials_options*, std::__h::shared_ptr<grpc_core::experimental::CrlProvider>)";
    "grpc_core::ServiceConfigImpl::Create(grpc_core::ChannelArgs const&, std::__h::basic_string_view<char, std::__h::char_traits<char>>)";
    "grpc_core::TraceFlag::TraceFlag(bool, char const*)";
    "grpc_inproc_channel_create(grpc_server*, grpc_channel_args const*, void*)";
    "grpc_call_get_arena(grpc_call*)";
    "grpc_core::Arena::AllocZone(unsigned int)";
    "grpc_call_context_set(grpc_call*, grpc_context_index, void*, void (*)(void*))";
    "grpc_call_server_authority(grpc_call const*)";
    "grpc_iomgr_run_in_background()";
    "grpc_core::ThreadQuota::Reserve(unsigned int)";
    "grpc_core::ThreadQuota::Release(unsigned int)";
    "grpc_error_set_int(absl::lts_20230802::Status, grpc_core::StatusIntProperty, long)";
    "grpc_core::Duration::operator std::__h::chrono::duration<long, std::__h::ratio<1l, 1000000000l>>() const";
    "grpc_core::Arena::AllocZone(unsigned long)";
    "grpc_core::ThreadQuota::Reserve(unsigned long)";
    "grpc_core::ThreadQuota::Release(unsigned long)";
    "grpc_call_credentials_release";
    "grpc_json_get_string_property(grpc_core::experimental::Json const&, char const*, absl::lts_20250127::Status*)";
    "grpc_core::LoadFile(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, bool)";
    "grpc_core::ConnectionContext::Orphan()";
    "grpc_core::ExperimentFlags::LoadFlagsAndCheck(unsigned int)";
    "grpc_core::ExperimentFlags::experiment_flags_";
    "grpc_cq_end_op(grpc_completion_queue*, void*, absl::lts_20250127::Status, void (*)(void*, grpc_cq_completion*), void*, grpc_cq_completion*, bool)";
    "grpc_core::StaticDataCertificateProvider::ValidateCredentials() const";
    "grpc_core::FileWatcherCertificateProvider::ValidateCredentials() const";
    "grpc_tls_credentials_options_set_min_tls_version";
    "grpc_tls_credentials_options_set_max_tls_version";
    "grpc_core::backend_metric_trace";
    "grpc__health__v1__HealthCheckRequest_msg_init";
    "grpc__health__v1__HealthCheckResponse_msg_init";
    "grpc_call_run_in_event_engine(grpc_call const*, absl::lts_20250127::AnyInvocable<void ()>)";
    "vtable for grpc_core::experimental::PassiveListenerImpl";
    "grpc_server_add_passive_listener(grpc_core::Server*, grpc_server_credentials*, std::__h::shared_ptr<grpc_core::experimental::PassiveListenerImpl>)";
    "_upb_Message_Realloc_dont_copy_me__upb_internal_use_only";
    "_upb_Message_Getexts_dont_copy_me__upb_internal_use_only";
    "grpc_core::ExperimentFlags::LoadFlagsAndCheck(unsigned long)";
  };
  local:
    *;
};

diff --git a/src/core/lib/debug/trace.cc b/src/core/lib/debug/trace.cc
index 84c0a3805d..b29396ae00 100644
--- a/src/core/lib/debug/trace.cc
+++ b/src/core/lib/debug/trace.cc
@@ -21,6 +21,7 @@
 #include "src/core/lib/debug/trace.h"
 
 #include <string.h>
+
 #include <type_traits>
 
 #include <grpc/grpc.h>
@@ -39,45 +40,51 @@ namespace grpc_core {
 TraceFlag* TraceFlagList::root_tracer_ = nullptr;
 
 bool TraceFlagList::Set(const char* name, bool enabled) {
-  TraceFlag* t;
-  if (0 == strcmp(name, "all")) {
-    for (t = root_tracer_; t; t = t->next_tracer_) {
+  if (0 == strlen(name)) {
+    gpr_log(GPR_DEBUG, "No trace flags are changed");
+  } else if (0 == strcmp(name, "all")) {
+    for (auto t = root_tracer_; t != nullptr; t = t->next_tracer_) {
       t->set_enabled(enabled);
     }
   } else if (0 == strcmp(name, "list_tracers")) {
     LogAllTracers();
   } else if (0 == strcmp(name, "refcount")) {
-    for (t = root_tracer_; t; t = t->next_tracer_) {
+    for (auto t = root_tracer_; t != nullptr; t = t->next_tracer_) {
       if (strstr(t->name_, "refcount") != nullptr) {
         t->set_enabled(enabled);
+        break;
       }
     }
   } else {
-    bool found = false;
-    for (t = root_tracer_; t; t = t->next_tracer_) {
+    for (auto t = root_tracer_; t != nullptr; t = t->next_tracer_) {
       if (0 == strcmp(name, t->name_)) {
         t->set_enabled(enabled);
-        found = true;
+        return true;
       }
     }
     // check for unknowns, but ignore "", to allow to GRPC_TRACE=
-    if (!found && 0 != strcmp(name, "")) {
-      gpr_log(GPR_ERROR, "Unknown trace var: '%s'", name);
-      return false; /* early return */
-    }
+    gpr_log(GPR_ERROR, "Unknown trace var: '%s'", name);
+    return false; /* early return */
   }
   return true;
 }
 
 void TraceFlagList::Add(TraceFlag* flag) {
+  gpr_log(GPR_DEBUG, "Add tracer:\t%s", flag->name_);
+  // prevent cycles at 'Add' flag to 'root_tracer_'
+  for (auto t = root_tracer_; t != nullptr; t = t->next_tracer_) {
+    // check if flag is already part of 'root_tracer_'
+    if (t == flag) {
+      return;
+    }
+  }
   flag->next_tracer_ = root_tracer_;
   root_tracer_ = flag;
 }
 
 void TraceFlagList::LogAllTracers() {
   gpr_log(GPR_DEBUG, "available tracers:");
-  TraceFlag* t;
-  for (t = root_tracer_; t != nullptr; t = t->next_tracer_) {
+  for (auto t = root_tracer_; t != nullptr; t = t->next_tracer_) {
     gpr_log(GPR_DEBUG, "\t%s", t->name_);
   }
 }
